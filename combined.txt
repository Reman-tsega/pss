//___________________________libraries ________________________________
#include <SPI.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <MFRC522.h>
#include <Servo.h>
#include <ArduinoJson.h>
#include <LiquidCrystal.h>
#include <ToneESP32.h>
//______________________ user defined variables _________________________
#define SS_PIN1 5  // Reader 1 SS pin (SDA)
#define RST_PIN1 16 // Reader 1 RST pin
#define SS_PIN2 15  // Reader 2 SS pin (SDA)
#define RST_PIN2 3 // Reader 2 RST pin
//#define LED_PIN 2
#define LED_GREEN 2
#define LED_RED 22
#define BUZZER 21

//________________________ instances _____________________________
ToneESP32 tone(BUZZER,0);
Servo myservo;
MFRC522 mfrc522_1(SS_PIN1, RST_PIN1); // Create MFRC522 instance for reader 1
MFRC522 mfrc522_2(SS_PIN2, RST_PIN2); // Create MFRC522 instance for reader 2

//___________________  lcd _____________--
const int rs = 33, en = 32, d4 = 14, d5 = 27, d6 = 26, d7 = 25;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
//______________________ global variable ___________________________-
String uid = "";
String reader = "";
const char* door_card_id = "1154699167";

const char* ssid = "No wifi";
const char* password = "";
const char* serverUrl = "http://192.168.245.57:3000/uid_check"; // Modify with your server URL
// ___________________________ LCD ____________________________________

void display_to_lcd (String message) {
  // Clear the screen before writing
  Serial.println("in lcd"+message);
  lcd.clear();
  delay(200);
  // Define the maximum number of characters per line
  int maxChars = 20;
  
  // Write the message to the first line
  lcd.setCursor(0, 0);
  delay(200);
  lcd.print(message.substring(0, maxChars));
  
  // If the message is longer than the maximum number of characters per line,
  // wrap the remaining text to the second line
  if (message.length() > maxChars) {
    lcd.setCursor(0, 1);
    lcd.print(message.substring(maxChars));
  }
  delay(1000);
}


//____________________________setup ___________________________
//_____________________________________________________________
void setup() {
//  ______________ servo ______________
pinMode(BUZZER, OUTPUT);
pinMode(LED_GREEN, OUTPUT);
pinMode(LED_RED, OUTPUT);
//tone.init();
  myservo.attach(13); // attach servo to pin 13
  myservo.write(0);
lcd.begin(20, 4);
//  ______________ spi and serial communiation ________________-
  Serial.begin(115200);
  SPI.begin();        // Initialize SPI bus
  mfrc522_1.PCD_Init(); // Initialize MFRC522 reader 1
  mfrc522_2.PCD_Init(); // Initialize MFRC522 reader 2
  Serial.println("Ready to read RFID tags from both readers!");

// ________________________wifi ______________________________
  WiFi.begin("No wifi", "haile@esp32");
  display_to_lcd("Connecting to WiFi...");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
    
  }
  
 

  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  display_to_lcd("Connected to " +WiFi.localIP()  );
}

//_____________ functions ______________________



//_____________________________________servo ________________________
void Open_Door(){
    display_to_lcd("access granted");
    display_to_lcd("door is opning ...");
    myservo.write(90); // rotate servo to 90 degrees
    delay(5000); // wait for 1 second

    display_to_lcd("door is cloing ...");
    myservo.write(0); // return servo to starting position

  
}

void Close_Door(){
  Serial.println("security alert door closed");
  myservo.write(0); // rotate servo to 90 degrees
  
}

//_______________________- first rfid ______________________
void Reader_1(){
  
    // Read card data from reader 1
    Serial.print("Reader 1: UID tag :");
    uid = "";
    for (byte i = 0; i < mfrc522_1.uid.size; i++) {
      Serial.print(mfrc522_1.uid.uidByte[i], HEX);
      uid.concat(String(mfrc522_1.uid.uidByte[i], HEX));
    }
    Serial.println("");
      reader = "Door";
//      Serial.println(uid);
//      Serial.println(reader);
 digitalWrite(LED_RED,HIGH);
  delay(1000);
  digitalWrite(LED_RED,LOW);
 digitalWrite(BUZZER,HIGH);
  delay(1000);
  digitalWrite(BUZZER,LOW);
    

    mfrc522_1.PICC_HaltA(); // Halt PICC
    mfrc522_1.PCD_StopCrypto1(); // Stop encryption on PC
  
}

//_______________________second rfid ______________________
void Reader_2(){
   // Look for new cards on reader 2
  
    // Read card data from reader 2
    Serial.print("Reader 2: UID tag :");
    uid = "";
    for (byte i = 0; i < mfrc522_2.uid.size; i++) {
      Serial.print(mfrc522_2.uid.uidByte[i], DEC);
      uid.concat(String(mfrc522_2.uid.uidByte[i], DEC));
      
    }
      reader = "STORE";
      Serial.print(uid);
//      Serial.println("reader: ");
//      Serial.println(reader);

    
    mfrc522_2.PICC_HaltA(); // Halt PICC
    mfrc522_2.PCD_StopCrypto1(); // Stop encryption on PCD
  
  
}
//______________________-- Alarm ________________________
void Alarm(){
  digitalWrite(BUZZER,HIGH);
  delay(2000);
  digitalWrite(BUZZER,LOW);
  delay(1000);
}




//_______________________ server connection and post request ______________________
void server(){
//  if wifi is connected this function try to connect with server and send post request, then get status code as response
  HTTPClient http;
      http.begin(serverUrl);
      http.addHeader("Content-Type", "application/json");

      // Construct the JSON payload to send uid to server
      String jsonPayload = "{\"uid\":\"" + uid + "\", \"mac\":\""+reader+"\"}"; // Modify with your additional data
      
      // get response from server whether allowed or not 
      int httpResponseCode = http.POST(jsonPayload);

      if (httpResponseCode > 0) {
        Serial.print("HTTP Response code: ");
        Serial.println(httpResponseCode);

        
        if (httpResponseCode == 201) {
          Serial.println("Data successfully sent to the server.");
        }

        //_______________________ Parse the JSON response_______________________________
    String jsonResponse = http.getString();
    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, jsonResponse);
    if (error) {
      Serial.println("Error parsing JSON response");
    } else {
      String condition = doc["condition"];
      String message = doc["message"];
      Serial.print("Response variable 1: ");
      Serial.println(condition);
      Serial.print("Response variable 2: ");
      Serial.println(message);

//      __________________ conditons based up on response  ____________________________
      if(condition == "unauthorized"){
      
      digitalWrite(LED_RED,HIGH);
      Alarm();
      delay(3000);
      digitalWrite(LED_RED,LOW);
//      digitalWrite(BUZZER,LOW);
      display_to_lcd(message);
      Close_Door();
        
    }else if(condition == "authorized"){
      digitalWrite(LED_GREEN,HIGH);
      delay(2000);
      digitalWrite(LED_GREEN,LOW);
      display_to_lcd(message);
      Open_Door();
      
    }
    else{
      display_to_lcd(message);
    }


    
    }

    
      }
      else {
        Serial.print("Error on sending POST: ");
        Serial.println(httpResponseCode);
      }

      http.end();
}




void loop() {
  // Look for new cards on reader 1
  if (mfrc522_1.PICC_IsNewCardPresent() && mfrc522_1.PICC_ReadCardSerial()) {
      Reader_1();
      if(uid == door_card_id){
         Open_Door();
      }
       else if (WiFi.status() == WL_CONNECTED) {
      server();
      }
      else {
        Serial.println("Error in WiFi connection");
      }
      delay(2000);  // Wait for 2 seconds before reading the next card
  }


  
  // Look for new cards on reader 2
  if (mfrc522_2.PICC_IsNewCardPresent() && mfrc522_2.PICC_ReadCardSerial()) {
    // Look for new cards on reader 2
    Reader_2();
    if(uid == door_card_id){
         Open_Door();
      }
       else if (WiFi.status() == WL_CONNECTED) {
      server();
      }
      else {
        Serial.println("Error in WiFi connection");
      }
      delay(2000);  // Wait for 2 seconds before reading the next card
    
  }

 

  delay(1000);
}